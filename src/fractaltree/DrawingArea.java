/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fractaltree;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;
import javax.swing.Timer;

/**
 *
 * @author Eric Lin
 */
public class DrawingArea extends javax.swing.JPanel {

    /**
     * Creates new form NewJPanel
     */
    public DrawingArea() {
        initComponents();
    }

    static double angleFactor = Math.PI / 4;
    static double sizeFactor = 0.59;
    static int depth = 10;
    static int trunkHeight = 100;
    Color[] rainbow = {Color.red,Color.orange,Color.yellow,Color.green,Color.blue,Color.pink,Color.magenta};
    int count = 0;
    boolean goBack = false;

    public void anim() {
        Timer t = new Timer(100, new TimerListener());
        t.start();
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        treeFractal(g, depth, this.getWidth()/2, this.getHeight() / 2+trunkHeight, trunkHeight, Math.PI / 2);
    }

    public void treeFractal(Graphics g, int depth, int x, int y, double length, double angle) {
        //calculate the ending x,y coordinates for this line segment.
        //As we are moving up, we subtract from the current base coordinates 
        //The formula used to determine end points by definition of sin and cos
        int x1 = x - (int) (Math.cos(angle) * length);
        int y1 = y - (int) (Math.sin(angle) * length);
        count++;
        //actually draw the line
        g.setColor(rainbow[(count%6)]);
        g.drawLine(x, y, x1, y1);
        //if we have more depth to go, recurse
        if (depth > 0) {
            treeFractal(g, depth - 1, x1, y1, length * sizeFactor, angle + angleFactor);
            treeFractal(g, depth - 1, x1, y1, length * sizeFactor, angle - angleFactor);
        }
    }

    private class TimerListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            if(sizeFactor >= .8)
                goBack = true;
            else if(sizeFactor <= .5)
                goBack = false;
            if(goBack)
                sizeFactor -= .01;
            else
                sizeFactor += .01;
            repaint();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
