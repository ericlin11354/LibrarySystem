/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fractaltree;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;

/**
 *
 * @author Eric Lin
 */
public class DrawingArea extends javax.swing.JPanel {

    /**
     * DrawingArea rotates and animates tree
     */
    public DrawingArea() {
        initComponents();
    }
    
    //each additional branch is shifted by angle
    static double angleFactor = Math.PI / 4;
    //size of branches
    static double sizeFactor = 0.59;
    //depth of branches
    static int depth = 10;
    //height of trunk of tree
    static int trunkHeight = 100;
    //rotates tree
    static double startAngle = Math.PI /2;

    /**
     * animates tree
     */
    public void anim() {
        Timer t = new Timer(10, new TimerListener());
        t.start();
    }

    /**
     * Overrides paintComponent to paint fractal tree
     * @param g 
     */
    @Override
    public void paintComponent(Graphics g) {
        //prevents trails on screen
        super.paintComponent(g);
        //calls method that paints tree
        treeFractal(g, depth, this.getWidth()/2, this.getHeight() / 2+trunkHeight, trunkHeight, startAngle);
    }

    /**
     * Draws branches of tree (starting at trunk). Changes angle every time it recurses in order for branches to not overlap
     * @param g
     * @param depth depth of branches (ex. depth set to 3 means the method calls itself 2 times)
     * @param x (x-coordinate for branches)
     * @param y (y-coordinate for branches)
     * @param length length of branches
     * @param angle angle rotates each branch
     */
    public void treeFractal(Graphics g, int depth, int x, int y, double length, double angle) {
        //use sin and cos to seperate branches
        //subtracts from base coordinates so branches stay intact
        int x1 = x - (int) (Math.cos(angle) * length);
        int y1 = y - (int) (Math.sin(angle) * length);
        //draws the branch
        g.setColor(Color.white);
        g.drawLine(x, y, x1, y1);
        //if we have more depth to go, recurse
        if (depth > 0) {
            treeFractal(g, depth - 1, x1, y1, length *sizeFactor, angle + angleFactor);
            treeFractal(g, depth - 1, x1, y1, length *sizeFactor, angle - angleFactor);
        }
    }

    /**
     * calls method while timer is active
     */
    private class TimerListener implements ActionListener {

        /**
         * Overrides actionPerformed. Decreases angleFactor and startAngle so that fractal tree rotates.
         * @param e 
         */
        @Override
        public void actionPerformed(ActionEvent e) {
            angleFactor -= .01;
            startAngle -= .01;
            repaint();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
